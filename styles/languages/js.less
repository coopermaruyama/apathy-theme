
//
//
// 	------------------------------------------------------------------
// 	Javascript
//
@js-foreground-color: hsl(220, 10%, 85%);
@js-alt-color: multiply(@tower-gray, @js-foreground-color);
@js-desaturated-alt-color: desaturate(@js-alt-color,20%);
@js-parens-active-color: darken(@js-desaturated-alt-color, 10%);
:host {
  .source.js {
    /*-------  Main text color  -------*/
    color: @js-foreground-color;

    /*----- Comment Color -----*/
    .comment {
      color: hsl(233, 15%, 35%);
    }

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    // SYMBOLS
    //


    //  - Braces wrapping a function you're working in should be very
    //  distinguishable. That way it's easy to identify where it ends/begins.
    //   - When multiple pairs of braces are on the same line, each pair should
    //  have a different color, yet each opening brace's closing partner should
    //  be the same color as it. That way it's easy to see what's wrapping what.
    //  - In places where hierarchy makes it obvious what's inside what (such
    //  as this LESS file), braces should be dimmed down as to not distract from
    //  the stuff that matters.

    /*-------  Round/Curly Braces  -------*/
    .meta.brace {
      color: hsl(191, 9%, 38%);
      font-weight: 700;
      &.curly,
      &.round {
        &:first-of-type,
        & + &,
        .leading-whitespace ~ &:nth-last-child(1):not(.round),
        &:only-child:nth-last-child(2):not(.round),
        .punctuation.terminator.statement {
          color: @gray-blend;
        }
      }
    }
    /*-------  Commas  -------*/
    .meta.brace.comma {
      color: @js-alt-color;
    }
    /*-------  Semicolon  -------*/
    .punctuation.terminator.statement {
      color: hsl(182, 9%, 44%);
    }
    /*-------  Period (method/object delimiters)  -------*/
    .meta.delimiter.method.period {
      color: @yellow;
      font-weight: 700;
    }

    /**
     * Parentheses used in method calls
     */
     .punctuation.bracket.round.js.arguments {
      &.begin, &.end {
        color: hsl(191, 9%, 38%);
      }
     }
    //
    //
    // ------------------------------------------------------------------------
    // KEYWORDS
    //
    /*-------  The Word "function"  -------*/
    .storage.type.function {
      font-style: normal;
      font-weight: 700;
      -webkit-text-stroke-width: 0.02em;
    }
    .storage.type.var {
      color: @tomato;
      font-style: italic;
    }
    /*----- Function declarations ------*/
    // ex: function myFunc(args) {...} (these can be declared after calls).
    .meta.function.js {
      .storage.type.function {
        color: hsl(59, 11%, 75%);
        font-weight: 400;
        -webkit-text-stroke-width: 0.04em;

      }
      .entity.name.function {
        font-weight: 700;
        color: hsl(82, 50%, 55%);
      }
    }
    /**
     * A function name when called.
     * e.g. `method` in instance.method()
     */
    .entity.name.function {
      font-weight: 400;
      color: @js-foreground-color;
    }
    /*-------  an operator which follows a defined function's name  -------*/
    // example: the '=' operator in the above example.
    .entity.name.function + .keyword.operator {
      -webkit-text-stroke-width: 0.02em;
      color: hsl(240, 15%, 70%);
      font-weight: normal;
    }
    /*-------  Matches class created with prototype  -------*/
    // ex: Sound.prototype = { ... }    <===== Matches 'Sound'
    .support {
      &.class {
        color: hsl(48, 100%, 54%);
      }
      // Matches the word 'prototype'
      &.constant {
        color: @blue;
      }
      // matches the '=' after 'prototype'
      &.constant + &.operator {
        text-shadow: none;
      }
    }
    & .keyword {
      color: hsl(256, 50%, 60%);
      font-weight: 800;
      &:not(.operator) + span:not(.string):not(.brace):not(.terminator):not(.operator):not(.meteor):not(.mongo) {
        color: @blue;
        font-style: normal;
        font-weight: bold;
        -webkit-text-stroke-width: 0;
      }
      &.operator {
        color: @yellow;
        &:not(:first-child):not(:last-child) {
          color: @raspberry;
        }
        &.new {
          color: hsl(250, 21%, 82%);
          font-weight: bold;
          -webkit-text-stroke: 0.01em;
        }
      }
    }
    //
    // ------------------------------------------------------------------------
    // Strings
    @string-sulu: multiply(@string-color, @sulu);
    @js-string-color: hsl(74, 50%, 55%);
    .string.quoted.single {
      color: @js-string-color;
    }
    .string.quoted.double {
      color: @js-string-color;
    }
    .string.begin + .entity.name.function,
    .string.begin:first-child,
    .string.end:last-child,
    .leading-whitespace + .string.begin,
    .entity.name.function + .string.end {
      color: saturate(lighten(@string-sulu, 10%), 10%);
    }
    .string.quoted.single {
      &,
      & > .string.begin,
      & > .string.end {
        color: saturate(lighten(@string-sulu, 10%), 10%);
      }
    }
    .meta.brace.round + .string.quoted.single * {
      color: saturate(lighten(@string-sulu, 10%), 10%);
    }
    .meta.brace.round + .string.quoted.double * {
      color: saturate(lighten(@string-sulu, 10%), 10%);
    }
    .storage.type.function {
      color: @scooter;
    }
    .meta.function {
      > .parameters.begin,
      > parameters.end {
        color: @tower-gray;
      }
    }
    .function {
      .meta& {
        color: @sulu;
      }
    }
    .variable {
      color: @js-foreground-color;
      font-weight: 400;
      font-style: normal;
    }
    .variable.language.js {
      color: @orange;
      font-weight: bold;
    }
    .variable.parameter {
      font-weight: 200;
      color: hsl(300, 35%, 70%);
    }
    .leading-whitespace ~ .keyword.operator {
      color: spin(saturate(darken(@js-foreground-color, 30%),70%), 330);
      // font-weight: normal;
    }
  }
}
